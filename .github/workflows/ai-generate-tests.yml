name: AI Generate PHP Unit Tests

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  generate-ai-tests:
    name: Generate AI-Powered Unit Tests
    runs-on: ubuntu-latest
    env:
      WP_CORE_DIR: "/tmp/wordpress/src"
      WP_TESTS_DIR: "/tmp/wordpress/tests/phpunit"
    
    steps:
      - name: Install SVN
        run: sudo apt-get install subversion -y

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: woocommerce/grow/prepare-php@actions-v1
        with:
          php-version: '8.2'

      - name: Prepare MySQL
        uses: woocommerce/grow/prepare-mysql@actions-v1

      - name: Install WP tests
        run: |
          chmod +x ./bin/install-wp-tests.sh
          ./bin/install-wp-tests.sh wordpress_test root root localhost latest latest

      - name: Install dependencies
        run: composer install

      - name: Generate coverage report
        run: |
          mkdir -p reports/coverage
          vendor/bin/phpunit --coverage-html reports/coverage --coverage-clover reports/coverage.xml

      - name: Setup Python for Llama
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Llama CPP Python
        run: |
          pip install llama-cpp-python
          pip install requests

      - name: Download Llama Model
        run: |
          mkdir -p models
          curl -L https://huggingface.co/TheBloke/CodeLlama-7B-GGUF/resolve/main/codellama-7b.Q4_K_M.gguf -o models/codellama.gguf

      - name: Analyze untested classes
        id: analyze
        run: |
          echo "<?php
          require 'vendor/autoload.php';
          
          \$xml = new SimpleXMLElement(file_get_contents('reports/coverage.xml'));
          \$lowest_coverage = null;
          \$class_to_test = null;
          
          foreach (\$xml->xpath('//class') as \$class) {
              \$metrics = \$class->metrics;
              \$elements = (float)\$metrics['elements'];
              if (\$elements > 0) {
                  \$coverage = (float)\$metrics['coveredelements'] / \$elements * 100;
                  if (\$coverage < 80 && (\$lowest_coverage === null || \$coverage < \$lowest_coverage)) {
                      \$lowest_coverage = \$coverage;
                      \$class_to_test = [
                          'class' => (string)\$class['name'],
                          'file' => (string)\$class['filename'],
                          'coverage' => round(\$coverage, 2)
                      ];
                  }
              }
          }
          
          if (\$class_to_test) {
              // Set GitHub outputs
              echo \"class_name={$class_to_test['class']}\" >> \$GITHUB_OUTPUT;
              echo \"coverage={$class_to_test['coverage']}\" >> \$GITHUB_OUTPUT;
              
              \$reflection = new ReflectionClass(\$class_to_test['class']);
              \$methods = \$reflection->getMethods(ReflectionMethod::IS_PUBLIC);
              
              \$testFile = 'tests/Unit/' . str_replace('.php', 'Test.php', basename(\$class_to_test['file']));
              \$testClass = basename(\$class_to_test['class']) . 'Test';
              
              if (!file_exists(dirname(\$testFile))) {
                  mkdir(dirname(\$testFile), 0777, true);
              }
              
              \$template = '<?php
          namespace Facebook\WooCommerce\Tests\Unit;
          
          use PHPUnit\Framework\TestCase;
          use ' . \$class_to_test['class'] . ';
          
          class ' . \$testClass . ' extends TestCase
          {';
              
              foreach (\$methods as \$method) {
                  if (!\$method->isConstructor()) {
                      \$template .= '
              public function test' . ucfirst(\$method->getName()) . '()
              {
                  \$this->markTestIncomplete(\'Auto-generated test for ' . \$method->getName() . '\');
              }';
                  }
              }
              
              \$template .= '
          }';
              
              file_put_contents(\$testFile, \$template);
              echo \"Generated test file: {\$testFile}\\n\";
              echo \"Class coverage: {\$class_to_test['coverage']}%\\n\";
              echo \"Class name: {\$class_to_test['class']}\\n\";
          } else {
              echo \"No classes found with coverage below 80%\\n\";
              exit(78);  # Skip PR creation if no classes need testing
          }" > generate_tests.php
          
          php generate_tests.php > test_files.txt

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "test: Add generated unit tests for ${{ steps.analyze.outputs.class_name }}"
          title: "Add unit tests for class with ${{ steps.analyze.outputs.coverage }}% coverage"
          body: |
            This PR adds automatically generated unit test stubs for the class with the lowest coverage.
            
            Generated test files:
            ```
            $(cat test_files.txt)
            ```
            
            Please review and implement the actual test assertions for these generated test methods.
          branch: feature/generate-unit-tests-single-class
          base: main
          labels: |
            automated
            tests
            needs-review 