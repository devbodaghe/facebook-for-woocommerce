name: Build Plugin Artifact

on: [ push, pull_request_target ] # Run on all pushes and PRs

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # This ensures we checkout the PR code when running on pull_request_target
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: composer
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache-dependency-path: './package-lock.json'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci || npm install
          composer install
      
      - name: Build plugin
        run: npm run build
      
      - name: Store built plugin
        uses: actions/upload-artifact@master
        continue-on-error: true
        with:
          name: facebook-for-woocommerce
          path: facebook-for-woocommerce.zip
          
      - name: Check if build succeeded
        id: check_build
        run: |
          if [ -f "facebook-for-woocommerce.zip" ]; then
            echo "build_success=true" >> $GITHUB_OUTPUT
            echo "filesize=$(du -h facebook-for-woocommerce.zip | cut -f1)" >> $GITHUB_OUTPUT
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create simple summary
        run: echo "⬇️ Scroll to the bottom of this page and download the 'facebook-for-woocommerce' artifact to get the latest plugin build." > $GITHUB_STEP_SUMMARY
      
      - name: Debug event information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Is PR?: ${{ github.event_name == 'pull_request_target' || github.event_name == 'pull_request' }}"
          echo "Has PR number?: ${{ github.event.pull_request.number != '' }}"
          echo "SHA: ${{ github.sha }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch name: ${{ github.ref_name }}"
      
      # Find associated PR for push events
      - name: Find associated PR
        id: find-pr
        if: github.event_name == 'push'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // For push events, find if there's an open PR for this branch
              const branch = context.ref.replace('refs/heads/', '');
              console.log(`Looking for PRs from branch: ${branch}`);
              
              const { data: pullRequests } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${branch}`
              });
              
              if (pullRequests.length > 0) {
                // Use the first PR if there are multiple for this branch
                const prNumber = pullRequests[0].number;
                console.log(`Found associated PR #${prNumber}`);
                core.setOutput('pr_number', prNumber.toString());
                core.setOutput('found', 'true');
              } else {
                console.log(`No open PR found for branch ${branch}`);
                core.setOutput('found', 'false');
              }
            } catch (error) {
              console.log(`Error finding PR: ${error.message}`);
              core.setOutput('found', 'false');
            }
      
      # Only run this step when we're in a pull request context or have found an associated PR
      - name: Update or post build info comment on PR
        if: github.event_name == 'pull_request_target' || github.event_name == 'pull_request' || steps.find-pr.outputs.found == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Get PR number from event context or from the find-pr step
              let prNumber;
              
              if (context.payload.pull_request) {
                prNumber = context.payload.pull_request.number;
                console.log(`Got PR number from event payload: ${prNumber}`);
              } else if ('${{ steps.find-pr.outputs.pr_number }}') {
                prNumber = parseInt('${{ steps.find-pr.outputs.pr_number }}');
                console.log(`Got PR number from find-pr step: ${prNumber}`);
              } else {
                throw new Error("No PR number found in context or from find-pr step");
              }
              
              console.log(`Working with PR #${prNumber}`);
              
              const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              const timestamp = new Date().toISOString();
              const commitSha = context.sha.substring(0, 7);
              
              // Create build info comment
              let commentBody = '';
              if ("${{ steps.check_build.outputs.build_success }}" === "true") {
                commentBody = "## 📦 Latest Plugin Build\n\n" +
                  `**Built at:** ${timestamp}\n` +
                  `**Commit:** ${commitSha}\n` +
                  `**Size:** ${{ steps.check_build.outputs.filesize }}\n\n` +
                  `**Download:** [Click here to download the plugin](${runUrl})\n\n` +
                  `_To download: Click the link above → Scroll to bottom → Download "facebook-for-woocommerce" artifact_`;
              } else {
                commentBody = "## ❌ Plugin Build Failed\n\n" +
                  `**Attempted at:** ${timestamp}\n` +
                  `**Commit:** ${commitSha}\n\n` +
                  `Please check the [workflow logs](${runUrl}) for more information.`;
              }
              
              // Add build info to workflow summary
              core.summary
                .addHeading(("${{ steps.check_build.outputs.build_success }}" === "true") ? 
                  "📦 Latest Plugin Build" : "❌ Plugin Build Failed")
                .addRaw(commentBody)
                .write();
              
              // The unique marker to identify our build comment
              const commentIdentifier = "## 📦 Latest Plugin Build";
              
              // Find all comments
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
              });
              
              // Look for our build info comment
              const buildInfoComment = comments.find(comment => 
                comment.body.includes(commentIdentifier) && 
                comment.user.login === 'github-actions[bot]'
              );
              
              if (buildInfoComment) {
                // Update the existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: buildInfoComment.id,
                  body: commentBody
                });
                console.log("Successfully updated existing build info comment");
              } else {
                // Create a new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: commentBody
                });
                console.log("Successfully posted new build info comment");
              }
            } catch (error) {
              console.log("Error details:", error.message);
              
              if (error.response) {
                console.log("Response status:", error.response.status);
                console.log("Response data:", JSON.stringify(error.response.data));
              }
              
              // Don't fail the workflow, just log the error
              console.log("Unable to update or post comment to PR. Build information is still available in the workflow summary.");
            } 